{"version":3,"sources":["components/useTaskData.jsx","components/Header.jsx","components/Grid.jsx","components/AllTab.jsx","components/Completed.jsx","components/Pending.jsx","components/Tabs.jsx","App.js","serviceWorker.js","index.js"],"names":["axios","require","TaskDataContext","createContext","UpdateTaskDataContext","UpdateStateContext","StateContext","GroupBYContext","UpdateGroupBYContext","SearchContext","UpdateSearchContext","TaskDataProvider","children","useState","taskData","setTaskData","cloneTask","setCloneTask","status","setStatus","groupBY","setGroupBY","search","setSearch","loading","setLoading","tempurl","setTempUrl","updateTaskData","a","url","get","response","data","map","item","todoList","x","DueDate","dueDate","format","Date","createdAt","console","error","updateState","statePram","Provider","value","param","searchData","fuzzySearch","toString","Dimmer","active","Loader","size","color","useUpdateTaskData","useContext","useTaskStatus","useUpdateTaskStatus","useGroupBy","searchQuery","searchArray","filteredArray","forEach","i","temp","keyname","indexOf","push","Priority","key","text","GropByOptions","HeaderComponent","isModelOpen","setModelOpen","summary","setSummary","description","setDescription","setDueDate","priority","setPriority","updateTask","updateGroupBy","groupByVal","searchVal","updateSearch","handleFormSubmit","method","headers","title","currentState","onChange","event","Segment","clearing","Header","as","floated","Icon","onClick","name","Grid","Row","Column","width","Select","placeholder","selection","options","Input","target","className","action","icon","Modal","dimmer","open","Content","Form","Field","control","label","TextArea","Group","widths","type","Actions","Button","negative","positive","Edit","props","show","setshow","isShowModel","onClose","Status","isDone","setDone","onStatus","_id","Delete","ColumnData","headerName","field","sortable","menuTabs","cellRendererFramework","prop","EditPopUpModel","DeletePopUpModel","log","delete","RapidGrid","setGridApi","setGridColumnApi","useEffect","style","height","length","onGridReady","params","api","columnApi","rowData","AllTab","groupBy","Completed","Pending","panes","menuItem","render","Tab","Pane","GridComponent","menu","attached","tabular","App","Tabs","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cc2b17f2.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\nimport { format } from 'date-fns';\nconst axios = require('axios');\n\nconst TaskDataContext = createContext(null);\nconst UpdateTaskDataContext = createContext(null);\nconst UpdateStateContext = createContext(null);\nconst StateContext = createContext(null);\nconst GroupBYContext = createContext(null);\nconst UpdateGroupBYContext = createContext(null);\nconst SearchContext = createContext(null);\nconst UpdateSearchContext = createContext(null);\n\nconst TaskDataProvider = ({ children }) => {\n  const [taskData, setTaskData] = useState([]);\n  const [cloneTask, setCloneTask] = useState([]);\n  const [status, setStatus] = useState('');\n  const [groupBY, setGroupBY] = useState('');\n  const [search, setSearch] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [tempurl, setTempUrl] = useState('');\n\n  const updateTaskData = async ({ url }) => {\n    try {\n      setLoading(true);\n      setTempUrl(url || tempurl);\n      const response = await axios.get(url || tempurl);\n      if (response && response.status === 200 && response.data && response.data.data && response.data.data) {\n        const data = response.data.data.map((item) => {\n          if (item.todoList) {\n            return item.todoList.map((x) => {\n              return {\n                ...x,\n                DueDate: x.dueDate,\n                dueDate: format(new Date(x.dueDate), 'yyyy-dd-MM'),\n                createdAt: format(new Date(x.createdAt), 'yyyy-dd-MM'),\n              }\n            })\n          } else {\n            return {\n              ...item,\n              DueDate: item.dueDate,\n              dueDate: format(new Date(item.dueDate), 'yyyy-dd-MM'),\n              createdAt: format(new Date(item.createdAt), 'yyyy-dd-MM'),\n            }\n          }\n        });\n        setTaskData(data);\n        setCloneTask(data);\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error(error);\n      return error;\n    }\n  };\n\n  const updateState = async (statePram) => {\n    setStatus(statePram);\n  }\n\n  const updateGroupBy = (param) => {\n    setGroupBY(param);\n  }\n  const updateSearch = (param) => {\n    setSearch(param);\n    if (param) {\n      const searchData = fuzzySearch(param.toString(), cloneTask);\n      setTaskData(searchData);\n    } else {\n      if (tempurl) {\n        updateTaskData({ url: tempurl.toString() });\n      }\n    }\n  }\n\n  return (\n    <TaskDataContext.Provider value={taskData}>\n      <UpdateTaskDataContext.Provider value={updateTaskData}>\n        <StateContext.Provider value={status}>\n          <UpdateStateContext.Provider value={updateState}>\n            <GroupBYContext.Provider value={groupBY}>\n              <UpdateGroupBYContext.Provider value={updateGroupBy}>\n                <SearchContext.Provider value={search}>\n                  <UpdateSearchContext.Provider value={updateSearch}>\n                    <Dimmer active={loading}>\n                      <Loader size='large' color=\"blue\" active={loading}>Loading</Loader>\n                    </Dimmer>\n                    {children}\n                  </UpdateSearchContext.Provider>\n                </SearchContext.Provider>\n              </UpdateGroupBYContext.Provider>\n            </GroupBYContext.Provider>\n          </UpdateStateContext.Provider>\n        </StateContext.Provider>\n      </UpdateTaskDataContext.Provider>\n    </TaskDataContext.Provider>\n  )\n};\n\nexport default TaskDataProvider;\n\nexport function useTaskData() {\n  return useContext(TaskDataContext);\n};\n\nexport function useUpdateTaskData() {\n  return useContext(UpdateTaskDataContext);\n};\n\nexport function useTaskStatus() {\n  return useContext(StateContext);\n};\n\nexport function useUpdateTaskStatus() {\n  return useContext(UpdateStateContext);\n};\n\nexport function useGroupBy() {\n  return useContext(GroupBYContext);\n};\n\nexport function useUpdateGroupBy() {\n  return useContext(UpdateGroupBYContext);\n};\n\nexport function useSearch() {\n  return useContext(SearchContext);\n};\n\nexport function useUpdateSearch() {\n  return useContext(UpdateSearchContext);\n};\n\nexport const fuzzySearch = (searchQuery, searchArray) => {\n  const filteredArray = [];\n  if (searchQuery) {\n    searchArray.forEach((i) => {\n      let temp = 0;\n      for (const keyname in i) {\n        if (i[keyname] && i[keyname].indexOf(searchQuery) > -1) {\n          temp++;\n        }\n      }\n      if (temp >= 1) {\n        filteredArray.push(i);\n      }\n    });\n  };\n  return filteredArray;\n};\n","import React, { useState } from 'react';\nimport {\n  Segment,\n  Header,\n  Icon,\n  Dropdown,\n  Grid,\n  Modal,\n  Form,\n  Input,\n  TextArea,\n  Button,\n  Select\n} from 'semantic-ui-react';\nimport { format } from 'date-fns'\nimport {\n  useUpdateTaskData,\n  useTaskStatus,\n  useUpdateGroupBy,\n  useGroupBy,\n  useUpdateSearch,\n  useSearch\n} from './useTaskData';\n\nconst axios = require('axios');\n\nconst Priority = [\n  {\n    key: 1,\n    text: 'None',\n    value: 'None'\n  },\n  {\n    key: 2,\n    text: 'Low',\n    value: 'Low'\n  },\n  {\n    key: 3,\n    text: 'Medium',\n    value: 'Medium'\n  },\n  {\n    key: 4,\n    text: 'High',\n    value: 'High'\n  }\n]\n\nconst GropByOptions = [\n  {\n    key: 14,\n    text: 'None',\n    value: ''\n  },\n  {\n    key: 24,\n    text: 'Created On',\n    value: 'createdAt'\n  },\n  {\n    key: 34,\n    text: 'Pending On',\n    value: 'currentState'\n  },\n  {\n    key: 44,\n    text: 'Priority',\n    value: 'priority'\n  }\n]\n\nconst HeaderComponent = () => {\n\n  const [isModelOpen, setModelOpen] = useState(false);\n  const [summary, setSummary] = useState('');\n  const [description, setDescription] = useState('');\n  const [dueDate, setDueDate] = useState('');\n  const [priority, setPriority] = useState('');\n  const updateTask = useUpdateTaskData();\n  const status = useTaskStatus();\n  const updateGroupBy = useUpdateGroupBy();\n  const groupByVal = useGroupBy();\n  const searchVal = useSearch();\n  const updateSearch = useUpdateSearch();\n\n  const handleFormSubmit = async () => {\n    if (summary && description && dueDate && priority) {\n      const postDat = await axios({\n        method: 'post',\n        url: 'http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/create',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        data: {\n          title: summary,\n          description: description,\n          currentState: 'open',\n          dueDate: format(new Date(dueDate), 'MM/dd/yyyy'),\n          priority: priority,\n        },\n      });\n      setModelOpen(false);\n      const url = status ? `http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo?status=${status}` : 'http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo';\n      updateTask({ url });\n      setPriority('');\n      setSummary('');\n      setDueDate('');\n      setDescription('');\n    }\n  }\n\n  const onChange = async (event, data) => {\n    updateGroupBy(data.value);\n  }\n\n  const handleSearch = (event) => {\n    updateSearch(event.target.value);\n  }\n\n\n  return (\n    <>\n      <Segment clearing>\n        <Header as='h2' floated='left'>\n          ToDoApp\n      </Header>\n        <Header as='h6' floated='right'>\n          <Icon onClick={() => setModelOpen(!isModelOpen)} color=\"blue\" name=\"plus\" />\n        </Header>\n      </Segment>\n      <Segment>\n        <Grid>\n          <Grid.Row>\n            <Grid.Column width={3}>\n              <p>Group By</p>\n              <Select value={groupByVal} onChange={onChange} placeholder='select priority' search selection options={GropByOptions} />\n            </Grid.Column>\n            <Grid.Column width={13}>\n              <p>Search</p>\n              <Input value={searchVal} onChange={handleSearch} className=\"search-input\" action={{ icon: 'search' }} placeholder='Search...' />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Segment>\n\n\n      <Modal\n        dimmer={true}\n        open={isModelOpen}\n      >\n\n        <Modal.Header>Create Task</Modal.Header>\n        <Modal.Content>\n          <Form>\n            <Form.Field\n              control={Input}\n              label='Summary'\n              name=\"Summary\"\n              value={summary}\n              onChange={(event) => setSummary(event.target.value)}\n              placeholder='Summary'\n            />\n            <Form.Field\n              control={TextArea}\n              label='Description'\n              name=\"Description\"\n              value={description}\n              onChange={(event) => setDescription(event.target.value)}\n              placeholder='Description'\n            />\n            <Form.Group widths='equal'>\n              <Form.Field\n                control={Input}\n                type=\"date\"\n                label='Due Date'\n                name=\"DueDate\"\n                value={dueDate}\n                onChange={(event) => setDueDate(event.target.value)}\n                placeholder='Due Date'\n              />\n\n              <Form.Field\n                control={Select}\n                options={Priority}\n                label={{ children: 'Priority' }}\n                name=\"Priority\"\n                onChange={(event, data) => setPriority(data.value)}\n                placeholder='Priority'\n              />\n            </Form.Group>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button negative onClick={() => setModelOpen(!isModelOpen)}>\n            cancel\n          </Button>\n          <Button type=\"submit\" positive onClick={handleFormSubmit}>\n            Save\n          </Button>\n        </Modal.Actions>\n      </Modal>\n\n    </>\n  );\n}\n\nexport default HeaderComponent;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { format } from 'date-fns';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport {\n  Icon,\n  Modal,\n  Form,\n  Input,\n  TextArea,\n  Button,\n  Select\n} from 'semantic-ui-react';\n\nimport { useUpdateTaskData, useTaskData, useTaskStatus } from './useTaskData';\nconst axios = require('axios');\n\n\nconst Priority = [\n  {\n    key: 1,\n    text: 'None',\n    value: 'None'\n  },\n  {\n    key: 2,\n    text: 'Low',\n    value: 'Low'\n  },\n  {\n    key: 3,\n    text: 'Medium',\n    value: 'Medium'\n  },\n  {\n    key: 4,\n    text: 'High',\n    value: 'High'\n  }\n]\n\nconst Edit = (props) => {\n  const [show, setshow] = useState(false);\n  const onEdit = () => {\n    setshow(true);\n  }\n  return (\n    <>\n      { show && <EditPopUpModel item={props.data} isShowModel={show} onClose={setshow} />}\n      <Icon className=\"custome-cell\" color=\"blue\" name=\"pencil\" onClick={onEdit} />\n    </>\n  )\n}\n\nconst Status = (props) => {\n  const [isDone, setDone] = useState(props.data.currentState === 'done' ? true : false\n  );\n  const updateTask = useUpdateTaskData();\n  const status = useTaskStatus();\n\n  const onStatus = async () => {\n    setDone(!isDone);\n    const postDat = await axios({\n      method: 'post',\n      url: `http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo/${props.data._id}`,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      data: {\n        ...props.data,\n        dueDate: props.data.DueDate,\n        currentState: props.data.currentState === 'open' ? 'done' : 'open',\n      },\n    });\n    const url = status ? `http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo?status=${status}` : 'http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo';\n    updateTask({ url });\n  }\n\n  return (\n    <>\n      { isDone\n        ? <Button onClick={onStatus} color=\"green\">Done</Button>\n        : <Button onClick={onStatus} color=\"teal\">Re-Open</Button>\n      }\n    </>\n  )\n}\n\nconst Delete = (props) => {\n  const [show, setshow] = useState(false);\n  const onDelete = () => {\n    setshow(true);\n  }\n  return (\n    <>\n      {show && <DeletePopUpModel item={props.data} isShowModel={show} onClose={setshow} />}\n      <Icon className=\"custome-cell\" color=\"red\" name=\"trash\" onClick={onDelete} />\n    </>\n  )\n}\n\nconst ColumnData = [\n  {\n    headerName: \"Summary\",\n    field: \"title\",\n    // filter: true,\n    sortable: true\n  },\n  {\n    headerName: \"Priority\",\n    field: \"priority\",\n    // filter: true,\n    sortable: true,\n  },\n  {\n    headerName: \"created On\",\n    field: \"createdAt\",\n    // filter: true,\n    sortable: true\n  },\n  {\n    headerName: \"Due By\",\n    field: \"dueDate\",\n    // filter: true,\n    sortable: true\n  },\n  {\n    menuTabs: [],\n    headerName: \"Action\",\n    cellRendererFramework: (prop) => <div> <Edit {...prop} /> <Status {...prop} />  <Delete {...prop} /> </div>,\n    width: 200,\n    sortable: false,\n  },\n]\n\nconst RapidGrid = (props) => {\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n  const taskData = useTaskData();\n\n  function onGridReady(params) {\n    setGridApi(params.api);\n    setGridColumnApi(params.columnApi);\n  }\n\n  useEffect(() => {\n  }, [taskData]);\n\n  return (\n    <>\n      <div className=\"ag-theme-alpine\" style={{ height: 400 }}>\n        {taskData.length > 0 && <AgGridReact\n          onGridReady={onGridReady}\n          rowData={taskData}>\n          {\n            ColumnData.map((item, i) => <AgGridColumn key={i} {...item} />)\n          }\n        </AgGridReact>}\n      </div>\n    </>\n  );\n};\n\nconst EditPopUpModel = ({ item, isShowModel = false, onClose }) => {\n  const [summary, setSummary] = useState(item.title);\n  const [description, setDescription] = useState(item.description);\n  const [dueDate, setDueDate] = useState(format(new Date(item.DueDate), 'yyyy-MM-dd'));\n  const [priority, setPriority] = useState(item.priority);\n  const updateTask = useUpdateTaskData();\n  const status = useTaskStatus();\n\n  const handleFormSubmit = async () => {\n    if (summary && description && dueDate && priority) {\n      const postDat = await axios({\n        method: 'post',\n        url: `http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo/${item._id}`,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        data: {\n          title: summary,\n          description: description,\n          currentState: 'open',\n          dueDate: format(new Date(dueDate), 'MM/dd/yyyy'),\n          priority: priority,\n        },\n      });\n      const url = status ? `http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo?status=${status}` : 'http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo';\n      updateTask({ url });\n      onClose(false);\n    }\n  }\n  return (\n    <Modal\n      dimmer={true}\n      open={isShowModel}\n    >\n\n      <Modal.Header>Edit Task</Modal.Header>\n      <Modal.Content>\n        <Form>\n          <Form.Field\n            control={Input}\n            label='Summary'\n            name=\"Summary\"\n            value={summary}\n            onChange={(event) => setSummary(event.target.value)}\n            placeholder='Summary'\n          />\n          <Form.Field\n            control={TextArea}\n            label='Description'\n            name=\"Description\"\n            value={description}\n            onChange={(event) => setDescription(event.target.value)}\n            placeholder='Description'\n          />\n          <Form.Group widths='equal'>\n            <Form.Field\n              control={Input}\n              type=\"date\"\n              label='Due Date'\n              name=\"DueDate\"\n              value={dueDate}\n              onChange={(event) => setDueDate(event.target.value)}\n              placeholder='Due Date'\n            />\n\n            <Form.Field\n              control={Select}\n              options={Priority}\n              label={{ children: 'Priority' }}\n              name=\"Priority\"\n              value={priority}\n              onChange={(event, data) => setPriority(data.value)}\n              placeholder='Priority'\n            />\n          </Form.Group>\n        </Form>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button negative onClick={() => {\n          onClose(false);\n        }}>\n          cancel\n          </Button>\n        <Button positive onClick={handleFormSubmit}>\n          Save\n          </Button>\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\nconst DeletePopUpModel = ({ item, isShowModel = false, onClose }) => {\n\n  const updateTask = useUpdateTaskData();\n  const status = useTaskStatus();\n\n  const handleFormSubmit = async () => {\n    console.log('deleteRead', item);\n    await axios.delete(`http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo/${item._id}`);\n    const url = status ? `http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo?status=${status}` : 'http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo';\n    await updateTask({ url });\n    onClose(false);\n  };\n\n  return (\n    <Modal\n      dimmer={true}\n      open={isShowModel}\n    >\n\n      <Modal.Header>Delete Task</Modal.Header>\n      <Modal.Content>\n        Are you sure you want to delete <b>{item.title} </b> task?\n      </Modal.Content>\n      <Modal.Actions>\n        <Button negative onClick={() => {\n          onClose(false);\n        }}>\n          cancel\n          </Button>\n        <Button positive onClick={handleFormSubmit}>\n          delete\n          </Button>\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\nexport default RapidGrid;\n\n\n","import React, { useEffect, useState } from 'react';\nimport { useUpdateTaskData, useUpdateTaskStatus, useGroupBy } from './useTaskData';\nimport RapidGrid from './Grid';\n\nconst AllTab = () => {\n  const updateTask = useUpdateTaskData();\n  const updateState = useUpdateTaskStatus();\n  const groupBy = useGroupBy();\n\n  useEffect(() => {\n    updateState('');\n    updateTask({ url: groupBy ? `http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo?groupBy=${groupBy}` : \"http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo\" });\n  }, [groupBy]);\n\n  return (\n    <>\n      <RapidGrid />\n    </>\n  );\n};\n\n\nexport default AllTab;\n","import React, { useEffect, useState } from 'react';\nimport { useUpdateTaskData, useUpdateTaskStatus, useGroupBy } from './useTaskData';\nimport RapidGrid from './Grid';\n\nconst Completed = () => {\n\n  const updateTask = useUpdateTaskData();\n  const updateState = useUpdateTaskStatus();\n  const groupBy = useGroupBy();\n\n  useEffect(() => {\n    updateState('done');\n    updateTask({ url: groupBy ? `http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo?status=done&&groupBy=${groupBy}` : \"http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo?status=done\" });\n  }, [groupBy]);\n\n  return (\n    <>\n      <RapidGrid />\n    </>\n  );\n};\n\nexport default Completed;\n","import React, { useEffect, useState } from 'react';\nimport { useUpdateTaskData, useUpdateTaskStatus, useGroupBy } from './useTaskData';\nimport RapidGrid from './Grid';\n\nconst Pending = () => {\n  const updateTask = useUpdateTaskData();\n  const updateState = useUpdateTaskStatus();\n  const groupBy = useGroupBy();\n\n  useEffect(() => {\n    updateState('open');\n    updateTask({ url: groupBy ? `http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo?status=open&&groupBy=${groupBy}` : \"http://ec2-3-16-187-172.us-east-2.compute.amazonaws.com/api/api/todo?status=open\" });\n  }, [groupBy]);\n\n  return (\n    <>\n      <RapidGrid />\n    </>\n  );\n};\n\nexport default Pending;\n","import React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport AllTab from './AllTab';\nimport Completed from './Completed';\nimport Pending from './Pending';\n\nconst panes = [\n  {\n    menuItem: 'All',\n    render: () => (\n      <Tab.Pane loading={false}>\n        <AllTab />\n      </Tab.Pane>\n    ),\n  },\n  {\n    menuItem: 'Pending',\n    render: () => <Tab.Pane><Pending /></Tab.Pane>\n  },\n  {\n    menuItem: 'Completed',\n    render: () => <Tab.Pane><Completed /></Tab.Pane>\n  },\n]\n\nconst GridComponent = () => {\n  return (\n    <div>\n      <Tab menu={{ color: \"blue\", attached: true, tabular: true }} panes={panes} />\n    </div>\n  );\n};\n\nexport default GridComponent;","import React from 'react';\nimport Store from './components/useTaskData';\nimport HeaderComponent from './components/Header'\nimport TabsComponent from './components/Tabs';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport 'font-awesome/css/font-awesome.css';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Store>\n        <HeaderComponent />\n        <TabsComponent />\n      </Store>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}